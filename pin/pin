#! /usr/bin/python

# Copyright (c) 2015, Matthew P. Grosvenor
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the project, the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import commands
import os
import re

#We're going to do nasty shit, need root
if not os.geteuid() == 0:
    sys.exit('Error: pin must be run as root. Please run sudo pin')

#Parse command line opts
#Quick and dirty....
#irq = None
#cpu = None

if len(sys.argv) < 2:
    sys.exit("Usage: pin cpu cmd")

cpu = int(sys.argv[1])
cmd = sys.argv[2]

if not os.path.exists("/tmp/pinned"):
     sys.exit("Error: Cannot find /tmp/pinned. Run ./pininit")

#first build the hex mask
hexcpumask = 1 << cpu

args = cmd.split(" ")
cmd = args[0]
#print "#########", cmd
#print "#########", args
 
pid = os.fork()
if pid == 0:
    os.execvp(cmd,args)
    #we never return from this point
    sys.exit("Error! Returned from exec!")

cmd = "taskset -p %x %s" % (hexcpumask,pid)
print "Running \"" + cmd + "\" ..."
out = commands.getoutput(cmd)


#Make it a realtime process
chrtcmd = "chrt --fifo -p 99 %s" % (pid)
print chrtcmd
out = commands.getoutput(chrtcmd)
print out

#Give this process highest priority
#nicecmd = "renice 99 %s" % (pid)
#out = commands.getoutput(nicecmd)

try:
    os.wait()
except:
    exit(0)

